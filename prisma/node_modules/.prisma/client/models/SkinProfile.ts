
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SkinProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SkinProfile
 * 
 */
export type SkinProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$SkinProfilePayload>

export type AggregateSkinProfile = {
  _count: SkinProfileCountAggregateOutputType | null
  _min: SkinProfileMinAggregateOutputType | null
  _max: SkinProfileMaxAggregateOutputType | null
}

export type SkinProfileMinAggregateOutputType = {
  id: string | null
  userId: string | null
  skinType: $Enums.SkinType | null
  sensitivity: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SkinProfileMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  skinType: $Enums.SkinType | null
  sensitivity: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SkinProfileCountAggregateOutputType = {
  id: number
  userId: number
  skinType: number
  concerns: number
  sensitivity: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SkinProfileMinAggregateInputType = {
  id?: true
  userId?: true
  skinType?: true
  sensitivity?: true
  createdAt?: true
  updatedAt?: true
}

export type SkinProfileMaxAggregateInputType = {
  id?: true
  userId?: true
  skinType?: true
  sensitivity?: true
  createdAt?: true
  updatedAt?: true
}

export type SkinProfileCountAggregateInputType = {
  id?: true
  userId?: true
  skinType?: true
  concerns?: true
  sensitivity?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SkinProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SkinProfile to aggregate.
   */
  where?: Prisma.SkinProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SkinProfiles to fetch.
   */
  orderBy?: Prisma.SkinProfileOrderByWithRelationInput | Prisma.SkinProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SkinProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SkinProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SkinProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SkinProfiles
  **/
  _count?: true | SkinProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SkinProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SkinProfileMaxAggregateInputType
}

export type GetSkinProfileAggregateType<T extends SkinProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateSkinProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSkinProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateSkinProfile[P]>
}




export type SkinProfileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SkinProfileWhereInput
  orderBy?: Prisma.SkinProfileOrderByWithAggregationInput | Prisma.SkinProfileOrderByWithAggregationInput[]
  by: Prisma.SkinProfileScalarFieldEnum[] | Prisma.SkinProfileScalarFieldEnum
  having?: Prisma.SkinProfileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SkinProfileCountAggregateInputType | true
  _min?: SkinProfileMinAggregateInputType
  _max?: SkinProfileMaxAggregateInputType
}

export type SkinProfileGroupByOutputType = {
  id: string
  userId: string
  skinType: $Enums.SkinType
  concerns: string[]
  sensitivity: string
  createdAt: Date
  updatedAt: Date
  _count: SkinProfileCountAggregateOutputType | null
  _min: SkinProfileMinAggregateOutputType | null
  _max: SkinProfileMaxAggregateOutputType | null
}

type GetSkinProfileGroupByPayload<T extends SkinProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SkinProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SkinProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SkinProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SkinProfileGroupByOutputType[P]>
      }
    >
  >



export type SkinProfileWhereInput = {
  AND?: Prisma.SkinProfileWhereInput | Prisma.SkinProfileWhereInput[]
  OR?: Prisma.SkinProfileWhereInput[]
  NOT?: Prisma.SkinProfileWhereInput | Prisma.SkinProfileWhereInput[]
  id?: Prisma.StringFilter<"SkinProfile"> | string
  userId?: Prisma.StringFilter<"SkinProfile"> | string
  skinType?: Prisma.EnumSkinTypeFilter<"SkinProfile"> | $Enums.SkinType
  concerns?: Prisma.StringNullableListFilter<"SkinProfile">
  sensitivity?: Prisma.StringFilter<"SkinProfile"> | string
  createdAt?: Prisma.DateTimeFilter<"SkinProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SkinProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type SkinProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  skinType?: Prisma.SortOrder
  concerns?: Prisma.SortOrder
  sensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type SkinProfileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.SkinProfileWhereInput | Prisma.SkinProfileWhereInput[]
  OR?: Prisma.SkinProfileWhereInput[]
  NOT?: Prisma.SkinProfileWhereInput | Prisma.SkinProfileWhereInput[]
  skinType?: Prisma.EnumSkinTypeFilter<"SkinProfile"> | $Enums.SkinType
  concerns?: Prisma.StringNullableListFilter<"SkinProfile">
  sensitivity?: Prisma.StringFilter<"SkinProfile"> | string
  createdAt?: Prisma.DateTimeFilter<"SkinProfile"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SkinProfile"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type SkinProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  skinType?: Prisma.SortOrder
  concerns?: Prisma.SortOrder
  sensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SkinProfileCountOrderByAggregateInput
  _max?: Prisma.SkinProfileMaxOrderByAggregateInput
  _min?: Prisma.SkinProfileMinOrderByAggregateInput
}

export type SkinProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.SkinProfileScalarWhereWithAggregatesInput | Prisma.SkinProfileScalarWhereWithAggregatesInput[]
  OR?: Prisma.SkinProfileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SkinProfileScalarWhereWithAggregatesInput | Prisma.SkinProfileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SkinProfile"> | string
  userId?: Prisma.StringWithAggregatesFilter<"SkinProfile"> | string
  skinType?: Prisma.EnumSkinTypeWithAggregatesFilter<"SkinProfile"> | $Enums.SkinType
  concerns?: Prisma.StringNullableListFilter<"SkinProfile">
  sensitivity?: Prisma.StringWithAggregatesFilter<"SkinProfile"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SkinProfile"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SkinProfile"> | Date | string
}

export type SkinProfileCreateInput = {
  id?: string
  skinType: $Enums.SkinType
  concerns?: Prisma.SkinProfileCreateconcernsInput | string[]
  sensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSkinProfileInput
}

export type SkinProfileUncheckedCreateInput = {
  id?: string
  userId: string
  skinType: $Enums.SkinType
  concerns?: Prisma.SkinProfileCreateconcernsInput | string[]
  sensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkinProfileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  skinType?: Prisma.EnumSkinTypeFieldUpdateOperationsInput | $Enums.SkinType
  concerns?: Prisma.SkinProfileUpdateconcernsInput | string[]
  sensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSkinProfileNestedInput
}

export type SkinProfileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  skinType?: Prisma.EnumSkinTypeFieldUpdateOperationsInput | $Enums.SkinType
  concerns?: Prisma.SkinProfileUpdateconcernsInput | string[]
  sensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkinProfileCreateManyInput = {
  id?: string
  userId: string
  skinType: $Enums.SkinType
  concerns?: Prisma.SkinProfileCreateconcernsInput | string[]
  sensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkinProfileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  skinType?: Prisma.EnumSkinTypeFieldUpdateOperationsInput | $Enums.SkinType
  concerns?: Prisma.SkinProfileUpdateconcernsInput | string[]
  sensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkinProfileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  skinType?: Prisma.EnumSkinTypeFieldUpdateOperationsInput | $Enums.SkinType
  concerns?: Prisma.SkinProfileUpdateconcernsInput | string[]
  sensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkinProfileNullableScalarRelationFilter = {
  is?: Prisma.SkinProfileWhereInput | null
  isNot?: Prisma.SkinProfileWhereInput | null
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type SkinProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  skinType?: Prisma.SortOrder
  concerns?: Prisma.SortOrder
  sensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkinProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  skinType?: Prisma.SortOrder
  sensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkinProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  skinType?: Prisma.SortOrder
  sensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkinProfileCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SkinProfileCreateWithoutUserInput, Prisma.SkinProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.SkinProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.SkinProfileWhereUniqueInput
}

export type SkinProfileUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SkinProfileCreateWithoutUserInput, Prisma.SkinProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.SkinProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.SkinProfileWhereUniqueInput
}

export type SkinProfileUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SkinProfileCreateWithoutUserInput, Prisma.SkinProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.SkinProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.SkinProfileUpsertWithoutUserInput
  disconnect?: Prisma.SkinProfileWhereInput | boolean
  delete?: Prisma.SkinProfileWhereInput | boolean
  connect?: Prisma.SkinProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SkinProfileUpdateToOneWithWhereWithoutUserInput, Prisma.SkinProfileUpdateWithoutUserInput>, Prisma.SkinProfileUncheckedUpdateWithoutUserInput>
}

export type SkinProfileUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SkinProfileCreateWithoutUserInput, Prisma.SkinProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.SkinProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.SkinProfileUpsertWithoutUserInput
  disconnect?: Prisma.SkinProfileWhereInput | boolean
  delete?: Prisma.SkinProfileWhereInput | boolean
  connect?: Prisma.SkinProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SkinProfileUpdateToOneWithWhereWithoutUserInput, Prisma.SkinProfileUpdateWithoutUserInput>, Prisma.SkinProfileUncheckedUpdateWithoutUserInput>
}

export type SkinProfileCreateconcernsInput = {
  set: string[]
}

export type EnumSkinTypeFieldUpdateOperationsInput = {
  set?: $Enums.SkinType
}

export type SkinProfileUpdateconcernsInput = {
  set?: string[]
  push?: string | string[]
}

export type SkinProfileCreateWithoutUserInput = {
  id?: string
  skinType: $Enums.SkinType
  concerns?: Prisma.SkinProfileCreateconcernsInput | string[]
  sensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkinProfileUncheckedCreateWithoutUserInput = {
  id?: string
  skinType: $Enums.SkinType
  concerns?: Prisma.SkinProfileCreateconcernsInput | string[]
  sensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkinProfileCreateOrConnectWithoutUserInput = {
  where: Prisma.SkinProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.SkinProfileCreateWithoutUserInput, Prisma.SkinProfileUncheckedCreateWithoutUserInput>
}

export type SkinProfileUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.SkinProfileUpdateWithoutUserInput, Prisma.SkinProfileUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SkinProfileCreateWithoutUserInput, Prisma.SkinProfileUncheckedCreateWithoutUserInput>
  where?: Prisma.SkinProfileWhereInput
}

export type SkinProfileUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.SkinProfileWhereInput
  data: Prisma.XOR<Prisma.SkinProfileUpdateWithoutUserInput, Prisma.SkinProfileUncheckedUpdateWithoutUserInput>
}

export type SkinProfileUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  skinType?: Prisma.EnumSkinTypeFieldUpdateOperationsInput | $Enums.SkinType
  concerns?: Prisma.SkinProfileUpdateconcernsInput | string[]
  sensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkinProfileUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  skinType?: Prisma.EnumSkinTypeFieldUpdateOperationsInput | $Enums.SkinType
  concerns?: Prisma.SkinProfileUpdateconcernsInput | string[]
  sensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type SkinProfileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  skinType?: boolean
  concerns?: boolean
  sensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["skinProfile"]>

export type SkinProfileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  skinType?: boolean
  concerns?: boolean
  sensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["skinProfile"]>

export type SkinProfileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  skinType?: boolean
  concerns?: boolean
  sensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["skinProfile"]>

export type SkinProfileSelectScalar = {
  id?: boolean
  userId?: boolean
  skinType?: boolean
  concerns?: boolean
  sensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SkinProfileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "skinType" | "concerns" | "sensitivity" | "createdAt" | "updatedAt", ExtArgs["result"]["skinProfile"]>
export type SkinProfileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type SkinProfileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type SkinProfileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $SkinProfilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SkinProfile"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    skinType: $Enums.SkinType
    concerns: string[]
    sensitivity: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["skinProfile"]>
  composites: {}
}

export type SkinProfileGetPayload<S extends boolean | null | undefined | SkinProfileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload, S>

export type SkinProfileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SkinProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SkinProfileCountAggregateInputType | true
  }

export interface SkinProfileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkinProfile'], meta: { name: 'SkinProfile' } }
  /**
   * Find zero or one SkinProfile that matches the filter.
   * @param {SkinProfileFindUniqueArgs} args - Arguments to find a SkinProfile
   * @example
   * // Get one SkinProfile
   * const skinProfile = await prisma.skinProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SkinProfileFindUniqueArgs>(args: Prisma.SelectSubset<T, SkinProfileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SkinProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SkinProfileFindUniqueOrThrowArgs} args - Arguments to find a SkinProfile
   * @example
   * // Get one SkinProfile
   * const skinProfile = await prisma.skinProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SkinProfileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SkinProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SkinProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkinProfileFindFirstArgs} args - Arguments to find a SkinProfile
   * @example
   * // Get one SkinProfile
   * const skinProfile = await prisma.skinProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SkinProfileFindFirstArgs>(args?: Prisma.SelectSubset<T, SkinProfileFindFirstArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SkinProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkinProfileFindFirstOrThrowArgs} args - Arguments to find a SkinProfile
   * @example
   * // Get one SkinProfile
   * const skinProfile = await prisma.skinProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SkinProfileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SkinProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SkinProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkinProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SkinProfiles
   * const skinProfiles = await prisma.skinProfile.findMany()
   * 
   * // Get first 10 SkinProfiles
   * const skinProfiles = await prisma.skinProfile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const skinProfileWithIdOnly = await prisma.skinProfile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SkinProfileFindManyArgs>(args?: Prisma.SelectSubset<T, SkinProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SkinProfile.
   * @param {SkinProfileCreateArgs} args - Arguments to create a SkinProfile.
   * @example
   * // Create one SkinProfile
   * const SkinProfile = await prisma.skinProfile.create({
   *   data: {
   *     // ... data to create a SkinProfile
   *   }
   * })
   * 
   */
  create<T extends SkinProfileCreateArgs>(args: Prisma.SelectSubset<T, SkinProfileCreateArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SkinProfiles.
   * @param {SkinProfileCreateManyArgs} args - Arguments to create many SkinProfiles.
   * @example
   * // Create many SkinProfiles
   * const skinProfile = await prisma.skinProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SkinProfileCreateManyArgs>(args?: Prisma.SelectSubset<T, SkinProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SkinProfiles and returns the data saved in the database.
   * @param {SkinProfileCreateManyAndReturnArgs} args - Arguments to create many SkinProfiles.
   * @example
   * // Create many SkinProfiles
   * const skinProfile = await prisma.skinProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SkinProfiles and only return the `id`
   * const skinProfileWithIdOnly = await prisma.skinProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SkinProfileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SkinProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SkinProfile.
   * @param {SkinProfileDeleteArgs} args - Arguments to delete one SkinProfile.
   * @example
   * // Delete one SkinProfile
   * const SkinProfile = await prisma.skinProfile.delete({
   *   where: {
   *     // ... filter to delete one SkinProfile
   *   }
   * })
   * 
   */
  delete<T extends SkinProfileDeleteArgs>(args: Prisma.SelectSubset<T, SkinProfileDeleteArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SkinProfile.
   * @param {SkinProfileUpdateArgs} args - Arguments to update one SkinProfile.
   * @example
   * // Update one SkinProfile
   * const skinProfile = await prisma.skinProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SkinProfileUpdateArgs>(args: Prisma.SelectSubset<T, SkinProfileUpdateArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SkinProfiles.
   * @param {SkinProfileDeleteManyArgs} args - Arguments to filter SkinProfiles to delete.
   * @example
   * // Delete a few SkinProfiles
   * const { count } = await prisma.skinProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SkinProfileDeleteManyArgs>(args?: Prisma.SelectSubset<T, SkinProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SkinProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkinProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SkinProfiles
   * const skinProfile = await prisma.skinProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SkinProfileUpdateManyArgs>(args: Prisma.SelectSubset<T, SkinProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SkinProfiles and returns the data updated in the database.
   * @param {SkinProfileUpdateManyAndReturnArgs} args - Arguments to update many SkinProfiles.
   * @example
   * // Update many SkinProfiles
   * const skinProfile = await prisma.skinProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SkinProfiles and only return the `id`
   * const skinProfileWithIdOnly = await prisma.skinProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SkinProfileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SkinProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SkinProfile.
   * @param {SkinProfileUpsertArgs} args - Arguments to update or create a SkinProfile.
   * @example
   * // Update or create a SkinProfile
   * const skinProfile = await prisma.skinProfile.upsert({
   *   create: {
   *     // ... data to create a SkinProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SkinProfile we want to update
   *   }
   * })
   */
  upsert<T extends SkinProfileUpsertArgs>(args: Prisma.SelectSubset<T, SkinProfileUpsertArgs<ExtArgs>>): Prisma.Prisma__SkinProfileClient<runtime.Types.Result.GetResult<Prisma.$SkinProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SkinProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkinProfileCountArgs} args - Arguments to filter SkinProfiles to count.
   * @example
   * // Count the number of SkinProfiles
   * const count = await prisma.skinProfile.count({
   *   where: {
   *     // ... the filter for the SkinProfiles we want to count
   *   }
   * })
  **/
  count<T extends SkinProfileCountArgs>(
    args?: Prisma.Subset<T, SkinProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SkinProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SkinProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkinProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SkinProfileAggregateArgs>(args: Prisma.Subset<T, SkinProfileAggregateArgs>): Prisma.PrismaPromise<GetSkinProfileAggregateType<T>>

  /**
   * Group by SkinProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkinProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SkinProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SkinProfileGroupByArgs['orderBy'] }
      : { orderBy?: SkinProfileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SkinProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkinProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SkinProfile model
 */
readonly fields: SkinProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SkinProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SkinProfileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SkinProfile model
 */
export interface SkinProfileFieldRefs {
  readonly id: Prisma.FieldRef<"SkinProfile", 'String'>
  readonly userId: Prisma.FieldRef<"SkinProfile", 'String'>
  readonly skinType: Prisma.FieldRef<"SkinProfile", 'SkinType'>
  readonly concerns: Prisma.FieldRef<"SkinProfile", 'String[]'>
  readonly sensitivity: Prisma.FieldRef<"SkinProfile", 'String'>
  readonly createdAt: Prisma.FieldRef<"SkinProfile", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SkinProfile", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SkinProfile findUnique
 */
export type SkinProfileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * Filter, which SkinProfile to fetch.
   */
  where: Prisma.SkinProfileWhereUniqueInput
}

/**
 * SkinProfile findUniqueOrThrow
 */
export type SkinProfileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * Filter, which SkinProfile to fetch.
   */
  where: Prisma.SkinProfileWhereUniqueInput
}

/**
 * SkinProfile findFirst
 */
export type SkinProfileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * Filter, which SkinProfile to fetch.
   */
  where?: Prisma.SkinProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SkinProfiles to fetch.
   */
  orderBy?: Prisma.SkinProfileOrderByWithRelationInput | Prisma.SkinProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SkinProfiles.
   */
  cursor?: Prisma.SkinProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SkinProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SkinProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SkinProfiles.
   */
  distinct?: Prisma.SkinProfileScalarFieldEnum | Prisma.SkinProfileScalarFieldEnum[]
}

/**
 * SkinProfile findFirstOrThrow
 */
export type SkinProfileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * Filter, which SkinProfile to fetch.
   */
  where?: Prisma.SkinProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SkinProfiles to fetch.
   */
  orderBy?: Prisma.SkinProfileOrderByWithRelationInput | Prisma.SkinProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SkinProfiles.
   */
  cursor?: Prisma.SkinProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SkinProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SkinProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SkinProfiles.
   */
  distinct?: Prisma.SkinProfileScalarFieldEnum | Prisma.SkinProfileScalarFieldEnum[]
}

/**
 * SkinProfile findMany
 */
export type SkinProfileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * Filter, which SkinProfiles to fetch.
   */
  where?: Prisma.SkinProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SkinProfiles to fetch.
   */
  orderBy?: Prisma.SkinProfileOrderByWithRelationInput | Prisma.SkinProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SkinProfiles.
   */
  cursor?: Prisma.SkinProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SkinProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SkinProfiles.
   */
  skip?: number
  distinct?: Prisma.SkinProfileScalarFieldEnum | Prisma.SkinProfileScalarFieldEnum[]
}

/**
 * SkinProfile create
 */
export type SkinProfileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * The data needed to create a SkinProfile.
   */
  data: Prisma.XOR<Prisma.SkinProfileCreateInput, Prisma.SkinProfileUncheckedCreateInput>
}

/**
 * SkinProfile createMany
 */
export type SkinProfileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SkinProfiles.
   */
  data: Prisma.SkinProfileCreateManyInput | Prisma.SkinProfileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SkinProfile createManyAndReturn
 */
export type SkinProfileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * The data used to create many SkinProfiles.
   */
  data: Prisma.SkinProfileCreateManyInput | Prisma.SkinProfileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SkinProfile update
 */
export type SkinProfileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * The data needed to update a SkinProfile.
   */
  data: Prisma.XOR<Prisma.SkinProfileUpdateInput, Prisma.SkinProfileUncheckedUpdateInput>
  /**
   * Choose, which SkinProfile to update.
   */
  where: Prisma.SkinProfileWhereUniqueInput
}

/**
 * SkinProfile updateMany
 */
export type SkinProfileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SkinProfiles.
   */
  data: Prisma.XOR<Prisma.SkinProfileUpdateManyMutationInput, Prisma.SkinProfileUncheckedUpdateManyInput>
  /**
   * Filter which SkinProfiles to update
   */
  where?: Prisma.SkinProfileWhereInput
  /**
   * Limit how many SkinProfiles to update.
   */
  limit?: number
}

/**
 * SkinProfile updateManyAndReturn
 */
export type SkinProfileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * The data used to update SkinProfiles.
   */
  data: Prisma.XOR<Prisma.SkinProfileUpdateManyMutationInput, Prisma.SkinProfileUncheckedUpdateManyInput>
  /**
   * Filter which SkinProfiles to update
   */
  where?: Prisma.SkinProfileWhereInput
  /**
   * Limit how many SkinProfiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SkinProfile upsert
 */
export type SkinProfileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * The filter to search for the SkinProfile to update in case it exists.
   */
  where: Prisma.SkinProfileWhereUniqueInput
  /**
   * In case the SkinProfile found by the `where` argument doesn't exist, create a new SkinProfile with this data.
   */
  create: Prisma.XOR<Prisma.SkinProfileCreateInput, Prisma.SkinProfileUncheckedCreateInput>
  /**
   * In case the SkinProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SkinProfileUpdateInput, Prisma.SkinProfileUncheckedUpdateInput>
}

/**
 * SkinProfile delete
 */
export type SkinProfileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
  /**
   * Filter which SkinProfile to delete.
   */
  where: Prisma.SkinProfileWhereUniqueInput
}

/**
 * SkinProfile deleteMany
 */
export type SkinProfileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SkinProfiles to delete
   */
  where?: Prisma.SkinProfileWhereInput
  /**
   * Limit how many SkinProfiles to delete.
   */
  limit?: number
}

/**
 * SkinProfile without action
 */
export type SkinProfileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkinProfile
   */
  select?: Prisma.SkinProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SkinProfile
   */
  omit?: Prisma.SkinProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkinProfileInclude<ExtArgs> | null
}
